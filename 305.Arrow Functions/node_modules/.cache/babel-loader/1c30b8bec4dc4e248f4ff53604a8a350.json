{"ast":null,"code":"var _jsxFileName = \"/Users/gabriel/Documents/Cursos/webdev/React/305.Arrow Functions/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 17\n  }\n}), document.getElementById(\"root\"));\nvar numbers = [3, 56, 2, 48, 5];\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\n/* arrow function */\n// const newNumbers = numbers.map( x  => x * 2);\n\n// console.log(newNumbers)\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\n/* arrow function */\n// const newNumbers = numbers.filter(num => num < 10);\n\n// console.log(newNumbers)\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n/* arrow function */\nvar newNumbers = numbers.reduce(function (accumulator, currentNumber) {\n  return accumulator + currentNumber;\n});\nconsole.log(newNumbers);\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })","map":{"version":3,"names":["React","ReactDOM","App","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","numbers","newNumbers","reduce","accumulator","currentNumber","console","log"],"sources":["/Users/gabriel/Documents/Cursos/webdev/React/305.Arrow Functions/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nvar numbers = [3, 56, 2, 48, 5];\n\n////Map -Create a new array by doing something with each item in an array.\n// const newNumbers = numbers.map(function (x) {\n//   return x * 2;\n// });\n\n/* arrow function */\n// const newNumbers = numbers.map( x  => x * 2);\n\n// console.log(newNumbers)\n\n\n//////Filter - Create a new array by keeping the items that return true.\n// const newNumbers = numbers.filter(function(num) {\n//   return num < 10;\n// });\n\n/* arrow function */\n// const newNumbers = numbers.filter(num => num < 10);\n\n// console.log(newNumbers)\n\n\n//Reduce - Accumulate a value by doing something to each item in an array.\n// var newNumber = numbers.reduce(function (accumulator, currentNumber) {\n//     return accumulator + currentNumber;\n// })\n\n/* arrow function */\nvar newNumbers = numbers.reduce((accumulator, currentNumber) => {\n    return accumulator + currentNumber;\n})\n\nconsole.log(newNumbers)\n\n\n\n////Find - find the first item that matches from an array.\n// const newNumber = numbers.find(function (num) {\n//   return num > 10;\n// })\n\n////FindIndex - find the index of the first item that matches.\n// const newNumber = numbers.findIndex(function (num) {\n//   return num > 10;\n// })\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,GAAG,MAAM,kBAAkB;AAElCD,QAAQ,CAACE,MAAM,eAACH,KAAA,CAAAI,aAAA,CAACF,GAAG;EAAAG,MAAA;EAAAC,QAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAA,CAAE,CAAC,EAAEC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AAEzD,IAAIC,OAAO,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;;AAE/B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;;AAEA;AACA,IAAIC,UAAU,GAAGD,OAAO,CAACE,MAAM,CAAC,UAACC,WAAW,EAAEC,aAAa,EAAK;EAC5D,OAAOD,WAAW,GAAGC,aAAa;AACtC,CAAC,CAAC;AAEFC,OAAO,CAACC,GAAG,CAACL,UAAU,CAAC;;AAIvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}